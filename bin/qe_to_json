#!/usr/bin/env python3

import argparse
import textwrap
from ase.dft.kpoints import BandPath
from koopmans.workflows import SinglepointWorkflow
from koopmans.io import write, read


def qei_to_json(input_file, json, workflow_settings={}):
    '''

    Converts a QE input file to a json file

    Arguments
    ---------
        input_file: the name of the QE input file to read in
        json: the name of the .json file to write out to
        workflow_settings: the koopmans.py keywords to add to the .json file (these are not
                    included in the QE input file)

    '''
    if input_file.endswith('.cpi'):
        key = 'kcp'
    elif input_file.endswith('.pwi'):
        key = 'pw'
    else:
        raise ValueError('Unrecognised input file format')

    calc = read(input_file)
    calc.atoms.calc = None

    wf = SinglepointWorkflow(atoms=calc.atoms,
                             parameters=workflow_settings,
                             pseudopotentials=calc.parameters.pseudopotentials)

    wf.master_calc_params[key] = calc.parameters
    if key == 'pw':
        if isinstance(calc.parameters.kpts, BandPath):
            wf.kpath = calc.parameters.kpts
        else:
            wf.kgrid = calc.parameters.kpts

    # Remove all the blocks io.write_json can't currently handle
    wf.master_calc_params = {k: v for k, v in wf.master_calc_params.items() if k in ['kcp', 'pw']}

    write(wf, json)

    return calc


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Converts Quantum ESPRESSO input files (.cpi/.pwi) to koopmans input files (.json)',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent('''\
               additional arguments:
                 -<keyword>  <value>  Add '<keyword>: <value>' to the workflow
                                      block of the JSON file
                 '''))
    parser.add_argument('qei', metavar='in.cpi/in.pwi', type=str,
                        help='the QE input file to read in')
    parser.add_argument('json', metavar='out.json', type=str,
                        help='the JSON input file to write out')

    parsed, unknown = parser.parse_known_args()

    # Find out the additional keywords provided to the parser
    for arg in unknown:
        if arg.startswith(('-', '--')):
            parser.add_argument(arg)

    args = parser.parse_args()

    # Store any additional arguments in the settings dict
    settings = {}
    for arg, value in args.__dict__.items():
        if arg in parsed:
            continue
        settings[arg] = value

    qei_to_json(args.qei, args.json, settings)

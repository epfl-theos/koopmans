#!/usr/bin/env python3

import argparse
from koopmans.workflows.singlepoint import SinglepointWorkflow
from koopmans.io import write, load_calculator
import copy
import textwrap


def qei_to_json(input_file, json, to_exclude=['nat', 'ntyp'], workflow_settings={}, qe_param={}):
    '''

    Converts a QE input file to a json file

    Arguments
    ---------
        input_file: the name of the QE input file to read in
        json: the name of the .json file to write out to
        to_exclude: the keywords included in the .cpi file to exclude from the .json file
        workflow_settings: the koopmans.py keywords to add to the .json file (these are not
                    included in the QE input file)
        qe_param: qe flags to alter

    '''
    calc = load_calculator(input_file)

    to_exclude += [k for k, v in calc.defaults.items() if getattr(calc, k, v) == v]

    for key in to_exclude:
        setattr(calc, key, None)
    for key, value in qe_param.items():
        setattr(calc, key, value)

    if input_file.endswith('.cpi'):
        key = 'kcp'
    elif input_file.endswith('pwi'):
        key = 'pw'
    else:
        raise ValueError('Unrecognised input file format')

    write(SinglepointWorkflow(workflow_settings, {key: calc}), json)

    return calc


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Converts Quantum ESPRESSO input files (.cpi/.pwi) to koopmans input files (.json)',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent('''\
               additional arguments:
                 -<keyword>  <value>  Add '<keyword>: <value>' to the workflow_settingss
                                      block of the JSON file
                 '''))
    parser.add_argument('qei', metavar='in.cpi/in.pwi', type=str,
                        help='the QE input file to read in')
    parser.add_argument('json', metavar='out.json', type=str,
                        help='the JSON input file to write out')

    parsed, unknown = parser.parse_known_args()

    # Find out the additional keywords provided to the parser
    for arg in unknown:
        if arg.startswith(('-', '--')):
            parser.add_argument(arg)

    args = parser.parse_args()

    settings = {"functional": "ki",
                "init_orbitals": "pz",
                "n_max_sc_steps": 2,
                "alpha_from_file": False}

    # Store any additional arguments in the settings dict
    for arg, value in args.__dict__.items():
        if arg in parsed:
            continue
        settings[arg] = value

    qei_to_json(args.qei, args.json, workflow_settings=settings)

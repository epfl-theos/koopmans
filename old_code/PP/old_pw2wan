subroutine compute_amn
   !-----------------------------------------------------------------------
   !
   USE io_global,  ONLY : stdout, ionode
   use kinds,           only : DP
   use klist,           only : nkstot, xk
   use wvfct,           only : nbnd, npw, npwx, igk, g2kin
   use control_flags,   only : gamma_only
   use wavefunctions_module, only : evc
   use io_files,        only : nwordwfc, iunwfc
   use io_files,        only : find_free_unit
   use gvect,           only : g, ngm, ecutwfc, gstart
   use cell_base,       only : tpiba2
   use uspp,            only : nkb, vkb
   use becmod,          only : becp, rbecp, calbec
   use wannier
   USE ions_base,       only : nat, ntyp => nsp, ityp, tau
   USE uspp_param,      ONLY : upf
   use mp_global,       only : intra_pool_comm
   use mp,              only : mp_sum
   USE noncollin_module,ONLY : noncolin, npol
   use lsda_mod,   ONLY : nspin, isk

   implicit none

   complex(DP) :: amn, ZDOTC
   real(DP):: DDOT
   complex(DP), allocatable :: sgf(:,:)
   complex(DP), allocatable :: c0_tmp_to_save(:,:)
   integer :: ik, ibnd, ibnd1, iw,i, ikevc, nt, ipol, counter
   character (len=9)  :: cdate,ctime
   character (len=60) :: header
   logical            :: any_uspp
   integer            :: istart

   !nocolin: we have half as many projections g(r) defined as wannier
   !         functions. We project onto (1,0) (ie up spin) and then onto
   !         (0,1) to obtain num_wann projections. jry


   !call read_gf_definition.....>   this is done at the beging

   any_uspp =ANY (upf(1:ntyp)%tvanp) 

   if(any_uspp .and. noncolin) call errore('pw2wannier90',&
       'NCLS calculation not implimented with USP',1)

   if (wan_mode.eq.'library') allocate(a_mat(num_bands,n_wannier,iknum))

   if (wan_mode.eq.'standalone') then
      iun_amn = find_free_unit()
      if (ionode) open (unit=iun_amn, file=TRIM(seedname)//".amn",form='formatted')
   endif

   write (stdout,*) "AMN"

   if (wan_mode.eq.'standalone') then
      CALL date_and_tim( cdate, ctime ) 
      header='Created on '//cdate//' at '//ctime
      if (ionode) then
         write (iun_amn,*) header 
         write (iun_amn,*) nbnd-nexband,  iknum, n_wannier
      endif
   endif
   !
   allocate( sgf(npwx,n_proj))
   !
   if (any_uspp) then
      if(gamma_only) then
          allocate ( rbecp(nkb,n_wannier))
      else
          allocate ( becp(nkb,n_wannier))
      end if
      CALL init_us_1
   end if
   !
      write(stdout, *) 'Linh test, print Amn' 
   write(stdout,'(a,i8)') ' iknum = ',iknum
   do ik=1,iknum
      write (stdout,'(i8)') ik
      ikevc = ik + ikstart - 1
!      if(noncolin) then
!         call davcio (evc_nc, nwordwfc, iunwfc, ikevc, -1 )
!      else
         call davcio (evc, nwordwfc, iunwfc, ikevc, -1 )
!      end if
      call gk_sort (xk(1,ik), ngm, g, ecutwfc / tpiba2, npw, igk, g2kin)
      call generate_guiding_functions(ik)   ! they are called gf(npw,n_proj)
      !
      !  USPP
      !
      if(any_uspp) then
         call init_us_2 (npw, igk, xk (1, ik), vkb)
         ! below we compute the product of beta functions with trial func.
         if (gamma_only) then
            call calbec ( npw, vkb, gf, rbecp, n_proj )
         else
            call calbec ( npw, vkb, gf, becp, n_proj )
         end if
         ! and we use it for the product S|trial_func>
         call s_psi (npwx, npw, n_proj, gf, sgf)  
      else
         sgf(:,:) = gf(:,:)
      endif
      !
      if(noncolin) then
         ! we do the projection as g(r)*a(r) and g(r)*b(r)
         do ipol=1,npol
            istart = (ipol-1)*npwx + 1
            do iw = 1,n_proj
               ibnd1 = 0 
               do ibnd = 1,nbnd
                  if (excluded_band(ibnd)) cycle
                  amn=(0.0_dp,0.0_dp)
!                  amn = ZDOTC(npw,evc_nc(1,ipol,ibnd),1,sgf(1,iw),1)
                  amn = ZDOTC(npw,evc(istart,ibnd),1,sgf(1,iw),1)
                  call mp_sum(amn, intra_pool_comm)
                  ibnd1=ibnd1+1
                  if (wan_mode.eq.'standalone') then
                     if (ionode) write(iun_amn,'(3i5,2f18.12)') ibnd1, iw+n_proj*(ipol-1), ik, amn
                  elseif (wan_mode.eq.'library') then
                     a_mat(ibnd1,iw+n_proj*(ipol-1),ik) = amn
                  else
                     call errore('compute_amn',' value of wan_mode not recognised',1)
                 endif
               end do
            end do
         end do
      else
         do iw = 1,n_proj
            ibnd1 = 0 
            do ibnd = 1,nbnd
               if (excluded_band(ibnd)) cycle
               if (gamma_only) then
                  amn = 2.0_dp*DDOT(2*npw,evc(1,ibnd),1,sgf(1,iw),1)
                  if (gstart==2) amn = amn - real(conjg(evc(1,ibnd))*sgf(1,iw))
               else
                  amn = ZDOTC(npw,evc(1,ibnd),1,sgf(1,iw),1) 
               end if
               call mp_sum(amn, intra_pool_comm)
               ibnd1=ibnd1+1
      ! NLN, print test
if (ibnd1==1) then
         write(stdout, *) 'Linh, ', iw, real(amn), aimag(amn)
endif
      !NLN, done print test

               if (wan_mode.eq.'standalone') then
                  if (ionode) write(iun_amn,'(3i5,2f18.12)') ibnd1, iw, ik, amn
               elseif (wan_mode.eq.'library') then
                  a_mat(ibnd1,iw,ik) = amn
               else
                  call errore('compute_amn',' value of wan_mode not recognised',1)
               endif
            end do
         end do
      end if
   end do  ! k-points
   !
   !
!!!! NLN test for saving the projected_wfc
   !
   if (nspin == 2) then
      allocate (c0_tmp_to_save (npw, n_proj*2) )
   else
      allocate (c0_tmp_to_save (npw, n_proj) )
   endif
   !
   c0_tmp_to_save(:,:) = (0.0, 0.0)
   !
   do iw=1, n_proj
      !
      ! Normalization
      !
      if (gamma_only) then
         amn = 2.0_dp*DDOT(2*npw,sgf(1,iw),1,sgf(1,iw),1)
         if (gstart==2) amn = amn - real(conjg(sgf(1,iw))*sgf(1,iw))
      else
         amn = ZDOTC(npw,sgf(1,iw),1,sgf(1,iw),1)
      end if
      call mp_sum(amn, intra_pool_comm)
      !
      amn = sqrt(amn)
      c0_tmp_to_save (:, iw) = sgf (:, iw)/amn
      !
   enddo
   !
   if (nspin == 2) then
      !
      counter = 0
      !
      do iw=n_proj+1, n_proj*2
         !
         counter = counter + 1
         c0_tmp_to_save (:, iw) = c0_tmp_to_save (:, counter)
         ! 
      enddo
      !
      call writeempty_state(c0_tmp_to_save, n_proj*2, 'evc0_empty_proj.dat')
      !
   else
      !  
      call writeempty_state(c0_tmp_to_save, n_proj, 'evc0_empty_proj.dat')
      !
   endif
   !
   deallocate ( c0_tmp_to_save )

   deallocate (sgf,csph)
   if(any_uspp) then 
     if (gamma_only) then 
        deallocate (rbecp)
     else
       deallocate (becp)
     end if
   end if
   !
   if (ionode .and. wan_mode.eq.'standalone') close (iun_amn)
   
   write(stdout,*)
   write(stdout,*) ' AMN calculated'
   !   
   return
end subroutine compute_amn

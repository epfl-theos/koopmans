! Input/Output Tool Kit (IOTK)
! Copyright (C) 2004-2006 Giovanni Bussi
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

!------------------------------------------------------------------------------!
! Inclusion of configuration file
#include "iotk_config.h"
!------------------------------------------------------------------------------!

>##############################################################################<
># inclusion of the spp definitions
>include iotk_include.sh
>##############################################################################<
># inclusion of the auxiliary macros
#include "iotk_auxmacros.h"
>##############################################################################

module iotk_xtox_interf
use iotk_base
implicit none
private

public :: iotk_atol
public :: iotk_ltoa
public :: iotk_atoi
public :: iotk_itoa

interface iotk_atol
function iotk_atol_x(a,check)
  character(len=*),           intent(in)  :: a
  logical,          optional, intent(out) :: check
  logical                                 :: iotk_atol_x
end function iotk_atol_x
end interface

interface iotk_atoi
> for kind in $kinds ; do
#ifdef __IOTK_INTEGER${kind}
subroutine iotk_atoi${kind}(i,a,check)
  use iotk_base
  implicit none
  integer, parameter :: this_kind = iotk_integer${kind}
  integer(kind=this_kind),           intent(out) :: i
  character(len=*),                  intent(in)  :: a
  logical,                 optional, intent(out) :: check
end subroutine iotk_atoi${kind}
#endif
> done
end interface

interface iotk_itoa
>for kind in $kinds ; do
#ifdef __IOTK_INTEGER${kind}
function iotk_itoa$kind(i,length)
  use iotk_base
  implicit none
  integer, parameter :: this_kind = iotk_integer${kind}
  integer(kind=this_kind),             intent(in)  :: i
  integer,                   optional, intent(out) :: length
  character(len=range(i)+2)                        :: iotk_itoa$kind
end function iotk_itoa$kind
#endif
> done
end interface

interface iotk_ltoa
>for kind in $kinds ; do
#ifdef __IOTK_LOGICAL${kind}
function iotk_ltoa$kind(l)
  use iotk_base
  implicit none
  integer, parameter :: this_kind = iotk_logical$kind
  logical(kind=this_kind), intent(in) :: l
  character                           :: iotk_ltoa$kind
end function iotk_ltoa$kind
#endif
> done
end interface

end module iotk_xtox_interf


import numpy as np
from modules import MP_mesh


file_hr = 'Si_hr.dat'			# file with the real-space Hamiltonian H(R)
hr_type = 'wannier'			# write 'koopmans' if H(R) is taken from a Koopmans calculation, or 'wannier' if H(R) is taken from Wannier90
emp_states = False			# if True we expect the H(R) to be for the Koopmans empty manifold (read_hr_scell is adapted to that format then)
seedname = 'Si'				# seedname as in Koopmans or Wannier calculation

cutoff = 1.E-3				# cutoff on the calculation of WFs distances
nr1,nr2,nr3 = 2,2,2			# dimensions of the supercell
double_R = False			# If True the translational symmertry of the real-space Hamiltonian, H(r+R)=H(r), is not assumed.
read_wf_phases = True			# Flag for reading the phases of the WFs from Wannier90

# INTERPOLATION (coordiantes of k-points in crystal units!!!)
interpolation = True			# if True the bands are interpolated along the following k_path, if False the energies are calculated on the MP k-mesh commensurate to the supercell
### PATH X-G-X 20-points
#k_path = np.array(([0.500000,0.000000,0.000000],[0.450000,0.000000,0.000000],[0.400000,0.000000,0.000000],[0.350000,0.000000,0.000000],[0.300000,0.000000,0.000000],[0.250000,0.000000,0.000000],[0.200000,0.000000,0.000000],[0.150000,0.000000,0.000000],[0.100000,0.000000,0.000000],[0.050000,0.000000,0.000000],[0.000000,0.000000,0.000000],[0.050000,0.000000,0.000000],[0.100000,0.000000,0.000000],[0.150000,0.000000,0.000000],[0.200000,0.000000,0.000000],[0.250000,0.000000,0.000000],[0.300000,0.000000,0.000000],[0.350000,0.000000,0.000000],[0.400000,0.000000,0.000000],[0.450000,0.000000,0.000000]))
### PATH G-X-M-G 13-points
#k_path = np.array(((0,0,0),(0.125,0,0),(0.25,0,0),(0.375,0,0),(0.5,0,0),(0.5,0,0.125),(0.5,0,0.25),(0.5,0,0.375),(0.5,0,0.5),(0.375,0,0.375),(0.25,0,0.25),(0.125,0,0.125),(0,0,0)))
### PATH G-X-M-G 51-points
#k_path = np.array(([0.000000,0.000000,0.000000],[0.033333,0.000000,0.000000],[0.066667,0.000000,0.000000],[0.100000,0.000000,0.000000],[0.133333,0.000000,0.000000],[0.166667,0.000000,0.000000],[0.200000,0.000000,0.000000],[0.233333,0.000000,0.000000],[0.266667,0.000000,0.000000],[0.300000,0.000000,0.000000],[0.333333,0.000000,0.000000],[0.366667,0.000000,0.000000],[0.400000,0.000000,0.000000],[0.433333,0.000000,0.000000],[0.466667,0.000000,0.000000],[0.500000,0.000000,0.000000],[0.500000,0.000000,0.033333],[0.500000,0.000000,0.066667],[0.500000,0.000000,0.100000],[0.500000,0.000000,0.133333],[0.500000,0.000000,0.166667],[0.500000,0.000000,0.200000],[0.500000,0.000000,0.233333],[0.500000,0.000000,0.266667],[0.500000,0.000000,0.300000],[0.500000,0.000000,0.333333],[0.500000,0.000000,0.366667],[0.500000,0.000000,0.400000],[0.500000,0.000000,0.433333],[0.500000,0.000000,0.466667],[0.500000,0.000000,0.500000],[0.476190,0.000000,0.476190],[0.452381,0.000000,0.452381],[0.428571,0.000000,0.428571],[0.404762,0.000000,0.404762],[0.380952,0.000000,0.380952],[0.357143,0.000000,0.357143],[0.333333,0.000000,0.333333],[0.309524,0.000000,0.309524],[0.285714,0.000000,0.285714],[0.261905,0.000000,0.261905],[0.238095,0.000000,0.238095],[0.214286,0.000000,0.214286],[0.190476,0.000000,0.190476],[0.166667,0.000000,0.166667],[0.142857,0.000000,0.142857],[0.119048,0.000000,0.119048],[0.095238,0.000000,0.095238],[0.071429,0.000000,0.071429],[0.047619,0.000000,0.047619],[0.023810,0.000000,0.023810]))
### PATH fcc L-G-X-(U=K)-G 26-points
k_path = np.array(([0.500000,0.500000,0.500000],[0.437500,0.437500,0.437500],[0.375000,0.375000,0.375000],[0.312500,0.312500,0.312500],[0.250000,0.250000,0.250000],[0.187500,0.187500,0.187500],[0.125000,0.125000,0.125000],[0.062500,0.062500,0.062500],[0.000000,0.000000,0.000000],[0.071429,0.071429,0.000000],[0.142857,0.142857,0.000000],[0.214286,0.214286,0.000000],[0.285714,0.285714,0.000000],[0.357143,0.357143,0.000000],[0.428571,0.428571,0.000000],[0.500000,0.500000,0.000000],[0.541667,0.541667,0.083333],[0.583333,0.583333,0.166667],[0.625000,0.625000,0.250000],[0.750000,0.375000,0.375000],[0.625000,0.312500,0.312500],[0.500000,0.250000,0.250000],[0.375000,0.187500,0.187500],[0.250000,0.125000,0.125000],[0.125000,0.062500,0.062500],[0.000000,0.000000,0.000000]))
### PATH fcc L-G-X-(U=K)-G 141-points
#k_path = np.array(([0.500000,0.500000,0.500000],[0.488636,0.488636,0.488636],[0.477273,0.477273,0.477273],[0.465909,0.465909,0.465909],[0.454545,0.454545,0.454545],[0.443182,0.443182,0.443182],[0.431818,0.431818,0.431818],[0.420455,0.420455,0.420455],[0.409091,0.409091,0.409091],[0.397727,0.397727,0.397727],[0.386364,0.386364,0.386364],[0.375000,0.375000,0.375000],[0.363636,0.363636,0.363636],[0.352273,0.352273,0.352273],[0.340909,0.340909,0.340909],[0.329545,0.329545,0.329545],[0.318182,0.318182,0.318182],[0.306818,0.306818,0.306818],[0.295455,0.295455,0.295455],[0.284091,0.284091,0.284091],[0.272727,0.272727,0.272727],[0.261364,0.261364,0.261364],[0.250000,0.250000,0.250000],[0.238636,0.238636,0.238636],[0.227273,0.227273,0.227273],[0.215909,0.215909,0.215909],[0.204545,0.204545,0.204545],[0.193182,0.193182,0.193182],[0.181818,0.181818,0.181818],[0.170455,0.170455,0.170455],[0.159091,0.159091,0.159091],[0.147727,0.147727,0.147727],[0.136364,0.136364,0.136364],[0.125000,0.125000,0.125000],[0.113636,0.113636,0.113636],[0.102273,0.102273,0.102273],[0.090909,0.090909,0.090909],[0.079545,0.079545,0.079545],[0.068182,0.068182,0.068182],[0.056818,0.056818,0.056818],[0.045455,0.045455,0.045455],[0.034091,0.034091,0.034091],[0.022727,0.022727,0.022727],[0.011364,0.011364,0.011364],[0.000000,0.000000,0.000000],[0.013889,0.013889,0.000000],[0.027778,0.027778,0.000000],[0.041667,0.041667,0.000000],[0.055556,0.055556,0.000000],[0.069444,0.069444,0.000000],[0.083333,0.083333,0.000000],[0.097222,0.097222,0.000000],[0.111111,0.111111,0.000000],[0.125000,0.125000,0.000000],[0.138889,0.138889,0.000000],[0.152778,0.152778,0.000000],[0.166667,0.166667,0.000000],[0.180556,0.180556,0.000000],[0.194444,0.194444,0.000000],[0.208333,0.208333,0.000000],[0.222222,0.222222,0.000000],[0.236111,0.236111,0.000000],[0.250000,0.250000,0.000000],[0.263889,0.263889,0.000000],[0.277778,0.277778,0.000000],[0.291667,0.291667,0.000000],[0.305556,0.305556,0.000000],[0.319444,0.319444,0.000000],[0.333333,0.333333,0.000000],[0.347222,0.347222,0.000000],[0.361111,0.361111,0.000000],[0.375000,0.375000,0.000000],[0.388889,0.388889,0.000000],[0.402778,0.402778,0.000000],[0.416667,0.416667,0.000000],[0.430556,0.430556,0.000000],[0.444444,0.444444,0.000000],[0.458333,0.458333,0.000000],[0.472222,0.472222,0.000000],[0.486111,0.486111,0.000000],[0.500000,0.500000,0.000000],[0.506579,0.506579,0.013158],[0.513158,0.513158,0.026316],[0.519737,0.519737,0.039474],[0.526316,0.526316,0.052632],[0.532895,0.532895,0.065789],[0.539474,0.539474,0.078947],[0.546053,0.546053,0.092105],[0.552632,0.552632,0.105263],[0.559211,0.559211,0.118421],[0.565789,0.565789,0.131579],[0.572368,0.572368,0.144737],[0.578947,0.578947,0.157895],[0.585526,0.585526,0.171053],[0.592105,0.592105,0.184211],[0.598684,0.598684,0.197368],[0.605263,0.605263,0.210526],[0.611842,0.611842,0.223684],[0.618421,0.618421,0.236842],[0.625000,0.625000,0.250000],[0.750000,0.375000,0.375000],[0.731250,0.365625,0.365625],[0.712500,0.356250,0.356250],[0.693750,0.346875,0.346875],[0.675000,0.337500,0.337500],[0.656250,0.328125,0.328125],[0.637500,0.318750,0.318750],[0.618750,0.309375,0.309375],[0.600000,0.300000,0.300000],[0.581250,0.290625,0.290625],[0.562500,0.281250,0.281250],[0.543750,0.271875,0.271875],[0.525000,0.262500,0.262500],[0.506250,0.253125,0.253125],[0.487500,0.243750,0.243750],[0.468750,0.234375,0.234375],[0.450000,0.225000,0.225000],[0.431250,0.215625,0.215625],[0.412500,0.206250,0.206250],[0.393750,0.196875,0.196875],[0.375000,0.187500,0.187500],[0.356250,0.178125,0.178125],[0.337500,0.168750,0.168750],[0.318750,0.159375,0.159375],[0.300000,0.150000,0.150000],[0.281250,0.140625,0.140625],[0.262500,0.131250,0.131250],[0.243750,0.121875,0.121875],[0.225000,0.112500,0.112500],[0.206250,0.103125,0.103125],[0.187500,0.093750,0.093750],[0.168750,0.084375,0.084375],[0.150000,0.075000,0.075000],[0.131250,0.065625,0.065625],[0.112500,0.056250,0.056250],[0.093750,0.046875,0.046875],[0.075000,0.037500,0.037500],[0.056250,0.028125,0.028125],[0.037500,0.018750,0.018750],[0.018750,0.009375,0.009375],[0.000000,0.000000,0.000000]))
### MP_mesh 16x16x16
#k_path = MP_mesh(16,16,16)

### IN CASE OF EQUIVALENT POINTS IN THE PATH (implemented only for a single couple of consecutive k points) --- It works for SC and FCC, to check in case of other systems.
eq_points = False			# To switch on in case there are two consecutive equivalent points in the k_path for the interpolation (like U and K in the path L-G-X-(U=K)-G)
point = np.array(([0.625000,0.625000,0.250000]))			# If eq_points=True, specify the coordinates of the first of the two equivalent points

### SMOOTH INTERPOLATION (Here we interpolate the difference Delta(R)=H_KI(R)-H_PBE(R) and we add it to the fine Hamiltonian H_PBE(R) calculated on a dense k-mesh)
do_smooth_interpolation = False
file_hr_smooth = 'Si_hr.dat'		# file with H_PBE(R), taken from Wannier90, calculated in the supercell (the same of H_KI(R))
hr_type_smooth = 'wannier'		# file type of file_hr_smooth
emp_states_smooth = False		# as for emp_states in the beginning
file_hr_pcell = '../../../pcell_888/wannier/occ/Si_hr.dat'		# file with the H(R) from the dense k-points calculation
permutation = 0,1,2,3			# here the permutation of the WFs in the primitive cell to get the same represetation of the supercell --- the permutation P must be written as P(i)=j where i is the index of the WF in the primitive cell and j is the index of the WF in the supercell



# DENSITY OF STATES
DOS = False		# if True it calculates the total density of states
			# The DOS is calculated over the obtained energies, that is over the k_path (if interpolation is True) or over the original k-mesh (if interpolation is False)
degauss = 0.02		# gaussian broadening for the DOS
nstep = 2000		# sampling of energy interval for the DOS
Emin = -10.		# initial energy (in eV) for the DOS
Emax = 10.		# final energy (in eV) for the DOS

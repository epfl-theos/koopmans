! Input/Output Tool Kit (IOTK)
! Copyright (C) 2004-2006 Giovanni Bussi
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

!------------------------------------------------------------------------------!
! Inclusion of configuration file
#include "iotk_config.h"
!------------------------------------------------------------------------------!

>##############################################################################<
># inclusion of the spp definitions
>include iotk_include.sh
>##############################################################################<
># inclusion of the auxiliary macros
#include "iotk_auxmacros.h"
>##############################################################################

> REVISION='$Revision: 1.1.1.1 $'
> REVISION="${REVISION//${dol}/}"

subroutine iotk_stream_read_x(unit,header,setpos,getpos,ierr)
  use iotk_base
  use iotk_stream_interf
  implicit none
  integer,                                    intent(in)  :: unit
  integer(iotk_header_kind),                  intent(out) :: header
  integer,                          optional, intent(in)  :: setpos
  integer,                          optional, intent(out) :: getpos
  integer,                          optional, intent(out) :: ierr
  integer :: aa(1)
  call iotk_stream_read(unit,header,aa,setpos,getpos,.true.,ierr)
end subroutine iotk_stream_read_x


> for type in $types ; do
> eval "LENSTAR=\$LENSTAR_$type"
>   for kind in $kinds ; do

#ifdef __IOTK_$type$kind
>PROCEDURE=iotk_stream_read
subroutine iotk_stream_read_${type}${kind}(unit,header,val,setpos,getpos,noval,ierr)
  use iotk_base
  use iotk_error_interf
  implicit none
  integer,                                      intent(in)  :: unit
  integer(iotk_header_kind),                    intent(out) :: header
  ${type}(kind=iotk_$type$kind$LENSTAR),      intent(out) :: val(:)
  integer,                            optional, intent(in)  :: setpos
  integer,                            optional, intent(out) :: getpos
  logical,                            optional, intent(in)  :: noval
  integer,                            optional, intent(out) :: ierr
#ifdef __IOTK_STREAMS
  integer(iotk_record_kind) :: rec,rec1
  integer :: iostat,lpos
#endif
  logical :: lnoval
  integer :: ierrl
  lnoval = .false.
  if(present(noval)) lnoval = noval
  ierrl = 0
#ifdef __IOTK_STREAMS
  if(present(setpos)) then
    lpos=setpos
  else
    inquire(unit,pos=lpos,iostat=iostat)
    if(iostat/=0) then
      $(ERROR ierrl "" iostat)
      goto 1
    end if
  end if
  if(present(getpos)) getpos = lpos
  read(unit,pos=lpos,iostat=iostat) rec
  if(iostat/=0) then
    $(ERROR ierrl "" iostat)
    goto 1
  end if
  read(unit,iostat=iostat) header
  if(iostat/=0) then
    $(ERROR ierrl "" iostat)
    goto 1
  end if
  if(.not.lnoval) then
    read(unit,iostat=iostat) val
    if(iostat/=0) then
      $(ERROR ierrl "" iostat)
      goto 1
    end if
  end if
  read(unit,pos=lpos+iotk_record_length+rec,iostat=iostat) rec1
  if(iostat/=0) then
    $(ERROR ierrl "" iostat)
    goto 1
  end if
  if(rec1/=rec) then
    $(ERROR ierrl "")
    goto 1
  end if
#else
  header = 0
  getpos = 0
  $(ERROR ierrl 'Streams are not implemented')
#endif
1 continue
  if(present(ierr)) then
    ierr = ierrl
  else
    if(ierrl/=0) call iotk_error_handler(ierrl)
  end if
end subroutine iotk_stream_read_${type}${kind}
#endif
>   done
> done

>PROCEDURE=iotk_stream_backspace
subroutine iotk_stream_backspace_x(unit,ierr)
  use iotk_base
  use iotk_error_interf
  implicit none
  integer,           intent(in)  :: unit
  integer, optional, intent(out) :: ierr
#ifdef __IOTK_STREAMS
  integer(iotk_record_kind) :: rec
  integer :: pos,iostat
#endif
  integer :: ierrl
  ierrl=0
#ifdef __IOTK_STREAMS
  inquire(unit,pos=pos,iostat=iostat)
  if(iostat/=0) then
    $(ERROR ierrl "" iostat)
    goto 1
  end if
  read(unit,pos=pos-iotk_record_length,iostat=iostat) rec
  if(iostat/=0) then
    $(ERROR ierrl "" iostat)
    goto 1
  end if
  read(unit,pos=pos-2*iotk_record_length-rec,iostat=iostat)
  if(iostat/=0) then
    $(ERROR ierrl "" iostat)
    goto 1
  end if
#else
  $(ERROR ierrl 'Streams are not implemented')
#endif
1 continue
  if(present(ierr)) then
    ierr = ierrl
  else
    if(ierrl/=0) call iotk_error_handler(ierrl)
  end if
end subroutine iotk_stream_backspace_x



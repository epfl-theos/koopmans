! Input/Output Tool Kit (IOTK)
! Copyright (C) 2004-2006 Giovanni Bussi
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

!------------------------------------------------------------------------------!
! Inclusion of configuration file
#include "iotk_config.h"
!------------------------------------------------------------------------------!

>##############################################################################<
># inclusion of the spp definitions
>include iotk_include.sh
>##############################################################################<
># inclusion of the auxiliary macros
#include "iotk_auxmacros.h"
>##############################################################################

> REVISION='$Revision: 1.1.1.1 $'
> REVISION="${REVISION//${dol}/}"


subroutine iotk_attr_dummy()
  write(0,*)
end subroutine iotk_attr_dummy

> function SIZE () { if ((rank<1)) ; then echo -n "1" ; else echo -n "size($1)" ; fi ; }
> for type in $types ; do
> type_string="\"$type\""
> for kind in $kinds ; do
> for rank in $ranks ; do
> if [ $type != CHARACTER ] || [ $rank -eq 0 -a $kind -eq 1 ] ; then

> if((rank%3==0)); then
> auxfile ${type}${kind}_${rank}
! Input/Output Tool Kit (IOTK)
! Copyright (C) 2004-2006 Giovanni Bussi
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
>fi


!------------------------------------------------------------------------------!
! Inclusion of configuration file
#include "iotk_config.h"
!------------------------------------------------------------------------------!

>##############################################################################<
># inclusion if the auxiliary macros
#include "iotk_auxmacros.h"
>##############################################################################

> eval "LENSTAR=\$LENSTAR_$type"

#ifdef __IOTK_${type}${kind}
#if $rank <= __IOTK_MAXRANK

> if [ $rank -eq 0 ] ; then
! This is needed as a workaround for bugged pack 
subroutine iotk_private_pack_$type$kind(out,in,n,l)
    use iotk_base
    implicit none
    integer,                                    intent(in)  :: n,l
> if [ $type = CHARACTER ] ; then
    ${type} (kind=iotk_${type}${kind},len=l), intent(out) :: out(n)
    ${type} (kind=iotk_${type}${kind},len=l), intent(in)  :: in(n)
> else
    ${type} (kind=iotk_${type}${kind}), intent(out) :: out(n)
    ${type} (kind=iotk_${type}${kind}), intent(in)  :: in(n)
> fi
    out = in
end subroutine iotk_private_pack_$type$kind

> if [ $type != CHARACTER ] ; then
>PROCEDURE=iotk_write
subroutine iotk_write_${type}${kind}(val,string,ierr)
  use iotk_base
  use iotk_error_interf
  use iotk_xtox_interf
  use iotk_fmt_interf
  use iotk_str_interf
  use iotk_misc_interf
  implicit none
  ${type}(kind=iotk_${type}${kind}), intent(in) :: val(:)
#ifdef __IOTK_WORKAROUND6
  character(len=*)              :: string
#else
  character(len=*), intent(out) :: string
#endif
  integer, intent(out) :: ierr
> if [ $type = REAL -o $type = COMPLEX ] ; then
  character(len=100) :: tmpval
> fi
  integer :: index,iostat
  ierr = 0
  iostat = 0 
  string(1:1) = iotk_eos
  if(size(val)==0) return
  if(len(string)==0) then
    $(ERROR ierr)
    return
  end if
  do index=1,size(val)
> if [ $type = LOGICAL ] ; then
    call iotk_strcat(string,iotk_ltoa(val(index))//" ",ierr)
    if(ierr/=0) then
      $(ERROR ierr)
      return
    end if
> elif [ $type = INTEGER ] ; then
    call iotk_strcat(string,trim(iotk_itoa(val(index)))//" ",ierr)
    if(ierr/=0) then
      $(ERROR ierr)
      return
    end if
> else
    write(tmpval,trim(iotk_wfmt("${type}",kind(val),1,-1," ")),iostat=iostat) val(index)
    if(iostat/=0) then
      $(ERROR ierr ' ' iostat)
      return
    end if
    call iotk_strcat(string,trim(adjustl(tmpval))//" ",ierr)
    if(ierr/=0) then
      $(ERROR ierr)
      return
    end if
> fi
  end do
! the last blank is deleted
  string(iotk_strlen(string):iotk_strlen(string)) = iotk_eos
end subroutine iotk_write_${type}${kind}
> fi
> fi

> if [ $rank -eq 0 ] ; then
> if [ $type != CHARACTER ] ; then
>PROCEDURE=iotk_read
subroutine iotk_read_${type}${kind}(val,string,index,ierr)
  use iotk_base
  use iotk_error_interf
  use iotk_xtox_interf
  use iotk_misc_interf
  implicit none
  ${type}(kind=iotk_${type}${kind}), intent(inout) :: val(:)
  character(len=*), intent(in) :: string
  integer, intent(inout) :: index
  integer, intent(out) :: ierr
> if [ $type = INTEGER -o $type = LOGICAL ] ; then
  logical :: check
> fi
  integer :: pos,pos1,iostat
  integer :: maxindex
> if [ $type = COMPLEX ] ; then
  real(kind=iotk_${type}${kind}) :: tmpreal
  complex(kind=iotk_${type}${kind}) :: tmpcomplex
> fi
#ifdef __IOTK_WORKAROUND9
  character(len=100) :: tmpstr ! debug
#endif
  pos = 0
  pos1= 0
  ierr = 0
  iostat = 0
> if [ $type = COMPLEX ] ; then
   maxindex = 2 * size(val)
> else
    maxindex = size(val)
> fi
! for the moment, commas are considered as blanks
  do
    pos = verify(string(pos1+1:)," ,")+pos1
    if(pos==pos1) exit
    pos = pos - 1
    pos1 = scan(string(pos+1:)," ,")+pos
    if(pos1==pos) pos1 = len(string) + 1
!READ string(pos+1:pos1-1)
    index = index+1
    if(index>maxindex) then
      $(ERROR ierr 'Too many data')
    end if
> if [ $type = INTEGER ] ; then
    call iotk_atoi(val(index),string(pos+1:pos1-1),check=check)
> elif [ $type = LOGICAL ] ; then
    val(index) = iotk_atol(string(pos+1:pos1-1),check=check)
> elif [ $type = REAL ] ; then
#ifdef __IOTK_WORKAROUND9
    tmpstr = TRIM( string(pos+1:pos1-1) )
    read( tmpstr, "(G100.95)",iostat=iostat) val(index)
#else
    read( string(pos+1:pos1-1), "(G100.95)",iostat=iostat) val(index)
#endif
> elif [ $type = COMPLEX ] ; then
#ifdef __IOTK_WORKAROUND9
    tmpstr = TRIM( string(pos+1:pos1-1) )
    read( tmpstr,"(G100.95)",iostat=iostat) tmpreal
#else
    read(string(pos+1:pos1-1),"(G100.95)",iostat=iostat) tmpreal
#endif
    if(modulo(index,2)==1) then
      tmpcomplex = cmplx(tmpreal,aimag((val((index+1)/2))),kind=iotk_${type}${kind})
    else
      tmpcomplex = cmplx(real(val((index+1)/2)),tmpreal,kind=iotk_${type}${kind})
    end if
    val((index+1)/2) = tmpcomplex
> fi
> if [ $type = INTEGER -o $type = LOGICAL ] ; then
    if(.not.check) then
      $(ERROR ierr 'Wrong string' 'string=string(pos+1:pos1-1)' )
      return
    end if
> else
    if(iostat/=0) then
      $(ERROR ierr 'Error reading a '${type}' number from string' 'string=string(pos+1:pos1-1)' iostat)
      return
    end if
> fi
    if(pos1>=len(string)) exit
  end do
end subroutine iotk_read_${type}${kind}
> fi
> fi

> if [ $type != CHARACTER -o $rank -eq 0 ] ; then
>PROCEDURE=iotk_write_attr
subroutine iotk_write_attr_${type}${kind}_${rank}(attr,name,val,dummy,first,newline,ierr)
  use iotk_base
  use iotk_error_interf
  use iotk_attr_interf
  use iotk_str_interf
  use iotk_misc_interf
  implicit none
  character(*), intent(inout) :: attr
  character(*), intent(in)    :: name
  ${type}(kind=iotk_${type}${kind}$LENSTAR), intent(in)  :: val ${SHAPE[$rank]}
  type(iotk_dummytype), optional :: dummy
  logical, optional, intent(in)  :: first
  logical, optional, intent(in)  :: newline
  integer, optional, intent(out) :: ierr
  integer :: ierrl
  integer :: attlen
  integer :: vallen
  integer :: namlen
  character :: delim
> if [ $type = CHARACTER ] ; then
  logical :: lquot,lapos
> fi
  character(iotk_vallenx) :: tmpval
  logical :: nl
  if(present(newline)) then
    nl = newline
  else
    nl = .false.
  endif
  ierrl = 0
  if(present(first)) then
    if(first) attr(1:1) = iotk_eos
  end if
  attlen = iotk_strlen_trim(attr)
  namlen = iotk_strlen_trim(name)
  if(.not.iotk_check_name(name)) then
    $(ERROR ierrl 'Wrong tag name' name='name(1:namlen)')
    goto 1
  end if
> if [ $type = CHARACTER ] ; then
  lquot=iotk_strscan(val,'"')>0
  lapos=iotk_strscan(val,"'")>0
  if(.not.lquot) then
    delim='"'
    call iotk_deescape(tmpval,val)
  else if(.not.lapos) then
    delim="'"
    call iotk_deescape(tmpval,val)
  else
    delim='"'
    call iotk_deescape(tmpval,val,quot=.true.,apos=.true.)
  end if
> else
  delim = '"'
> if [ $rank -eq 0 ] ; then
  call iotk_write((/val/),tmpval,ierrl)
> else
  call iotk_write(pack(val,mask=.true.),tmpval,ierrl)
> fi
  if(ierrl/=0) then
    $(ERROR ierrl)
    goto 1
  end if
> fi
  vallen = iotk_strlen(tmpval)
  if(attlen+vallen+namlen+5>len(attr)) then
    $(ERROR ierrl 'Attribute dummy argument is too short')
    goto 1
  end if
  if(.not. nl) then
    attr(attlen+1:attlen+vallen+namlen+5) = " "//name(1:namlen)//"="//delim//tmpval(1:vallen)//delim//iotk_eos
  else
    attr(attlen+1:attlen+vallen+namlen+len(iotk_newline)+5) &
       = iotk_newline//" "//name(1:namlen)//"="//delim//tmpval(1:vallen)//delim//iotk_eos
  endif
1 continue
  if(present(ierr)) then
    ierr = ierrl
  else
    if(ierrl/=0) call iotk_error_handler(ierrl)
  end if
end subroutine iotk_write_attr_${type}${kind}_${rank}

>PROCEDURE=iotk_scan_attr
subroutine iotk_scan_attr_${type}${kind}_${rank}(attr,name,val,dummy,found,default,eos,ierr)
  use iotk_base
  use iotk_error_interf
  use iotk_attr_interf, only : iotk_read
  use iotk_str_interf
  use iotk_misc_interf
  implicit none
  character(*),             intent(in)  :: attr
  character(*),             intent(in)  :: name
#ifdef __IOTK_WORKAROUND6
  ${type}(kind=iotk_${type}${kind}$LENSTAR)                        :: val ${SHAPE[$rank]}
#else
  ${type}(kind=iotk_${type}${kind}$LENSTAR), intent(out)           :: val ${SHAPE[$rank]}
#endif
  type(iotk_dummytype), optional :: dummy
  logical,        optional, intent(out) :: found
  ${type}(kind=iotk_${type}${kind}$LENSTAR), optional, intent(in)  :: default ${SHAPE[$rank]}
  logical,        optional, intent(in)  :: eos
  integer,        optional, intent(out) :: ierr
  integer :: ierrl
  integer :: attlen,pos,equal,namlen
  character :: delim
  logical :: foundl
  character(iotk_vallenx) :: valc
> if [ $type = CHARACTER ] ; then
  character(iotk_vallenx) :: valctmp
  integer :: vallen,defaultlen
  logical :: leos
  leos=.false.
  if(present(eos)) leos=eos
> else
  integer :: index
  ${type}(kind=iotk_${type}${kind}), allocatable :: tmpval (:)
> fi
  ierrl = 0
  attlen=iotk_strlen(attr)
  namlen=iotk_strlen_trim(name)
  foundl = .false.
  equal = 0
  do
    pos = verify(attr(equal+1:attlen)," ")
    if(pos<=0) exit
    equal = equal + pos
    pos = scan(attr(equal+1:attlen),"=")
    if(pos<=0) then
      $(ERROR ierrl '' attr='attr(equal+1:attlen)' )
      goto 1
    end if
    equal = equal + pos
    if(trim(attr(equal-pos:equal-1))==name(1:namlen)) foundl = .true.
    pos = verify(attr(equal+1:attlen)," ")
    if(pos<=0) then
      $(ERROR ierrl)
      goto 1
    end if
    equal = equal + pos
    delim = attr(equal:equal)
    if(delim/="'" .and. delim/='"') then
      $(ERROR ierrl)
      goto 1
    end if
    pos = scan(attr(equal+1:attlen),delim)
    if(pos<=0) then
      $(ERROR ierrl)
      goto 1
    end if
    if(foundl) exit
    equal = equal + pos
  end do
  if(foundl) then
    call iotk_strcpy(valc,attr(equal+1:equal+pos-1),ierrl)
    if(ierrl/=0) then
      $(ERROR ierrl)
      goto 1
    end if
  else
    goto 1
  end if
> if [ $type = CHARACTER ] ; then
  call iotk_escape(valctmp,valc)
  vallen = iotk_strlen(valctmp)
  if(len(val) < vallen) then
    $(ERROR ierrl)
    goto 1
  end if
  val(1:vallen) = valctmp(1:vallen)
  if(len(val) > vallen) then
    val(vallen+1:vallen+1) = iotk_eos
    if(.not.leos) then
      val(vallen+1:)=" "
    end if
  end if
> else
  allocate(tmpval($(SIZE val)))
  index = 0
  call iotk_str_clean(valc)
  call iotk_read(tmpval,valc(1:iotk_strlen(valc)),index,ierrl)
  if(ierrl/=0) then
    $(ERROR ierrl)
    goto 1
  end if
> if [ $type = COMPLEX ] ; then
  if(index/=2*$(SIZE val)) then
> else
  if(index/=$(SIZE val)) then
> fi
    $(ERROR ierrl 'Attribute size does not match' attr=valc size='size(tmpval)')
    goto 1
  end if
> if [ $rank -eq 0 ] ; then
  val = tmpval(1)
> else
  val = reshape (source=tmpval,shape=shape(val))
> fi
  deallocate(tmpval)
> fi
1 continue
  if(ierrl/=0) foundl=.false.
  if(present(found)) found = foundl
  if(ierrl==0 .and. .not. present(found) .and. .not. present(default) .and. .not. foundl) then
    $(ERROR ierrl 'Attribute not found' name)
    ierrl = - ierrl
  end if
  if(present(default) .and. .not. foundl) then
> if [ $type = CHARACTER ] ; then
    if(leos) then
      defaultlen = min(iotk_strlen(default),len(val))
      val(1:defaultlen) = default(1:defaultlen)
      if(defaultlen<len(val)) val(defaultlen+1:defaultlen+1)=iotk_eos
    else
      val = default
    end if
> else
    val = default
> fi
  end if
  if(present(ierr)) then
    ierr = ierrl
  else
    if(ierrl/=0) call iotk_error_handler(ierrl)
  end if
end subroutine iotk_scan_attr_${type}${kind}_${rank}
> fi

#endif
#endif

subroutine iotk_attr_dummy_${type}${kind}_${rank}
  write(0,*)
end subroutine iotk_attr_dummy_${type}${kind}_${rank}

> fi
> done
> done
> done


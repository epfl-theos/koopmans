! Input/Output Tool Kit (IOTK)
! Copyright (C) 2004-2006 Giovanni Bussi
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Lesser General Public
! License as published by the Free Software Foundation; either
! version 2.1 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Lesser General Public License for more details.
!
! You should have received a copy of the GNU Lesser General Public
! License along with this library; if not, write to the Free Software
! Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

!------------------------------------------------------------------------------!
! Inclusion of configuration file
#include "iotk_config.h"
!------------------------------------------------------------------------------!

>##############################################################################<
># inclusion of the spp definitions
>include iotk_include.sh
>##############################################################################<
># inclusion of the auxiliary macros
#include "iotk_auxmacros.h"
>##############################################################################

module iotk_dat_interf
implicit none
private

public :: iotk_write_dat
public :: iotk_scan_dat
public :: iotk_scan_dat_aux


interface iotk_write_dat
>for type in $types ; do
>  eval "LENSTAR=\$LENSTAR_$type"
>  for kind in $kinds ; do
>    [[ $type == CHARACTER ]] && [[ $kind != 1 ]] && continue
#ifdef __IOTK_${type}${kind}
>    for rank in $ranks ; do
#if $rank <= __IOTK_MAXRANK
subroutine iotk_write_dat_${type}${kind}_${rank}(unit,name,dat,dummy,attr,columns,sep,fmt,ierr)
  use iotk_base
  implicit none
  integer, parameter :: this_kind = iotk_${type}${kind}
  integer,                                   intent(in)  :: unit
  character(len=*),                          intent(in)  :: name
  ${type}(kind=this_kind$LENSTAR),           intent(in)  :: dat ${SHAPE[$rank]}
  type(iotk_dummytype),            optional              :: dummy
  character(len=*),                optional, intent(in)  :: sep
  character(len=*),                optional, intent(in)  :: fmt
  character(len=*),                optional, intent(in)  :: attr
  integer,                         optional, intent(in)  :: columns
  integer,                         optional, intent(out) :: ierr
end subroutine iotk_write_dat_${type}${kind}_${rank}
#endif
>    done
#endif
>  done
>done
end interface

interface iotk_scan_dat
>for type in $types ; do
>  eval "LENSTAR=\$LENSTAR_$type"
>  for kind in $kinds ; do
>    [[ $type == CHARACTER ]] && [[ $kind != 1 ]] && continue
#ifdef __IOTK_${type}${kind}
>    for rank in $ranks ; do
#if $rank <= __IOTK_MAXRANK
subroutine iotk_scan_dat_${type}${kind}_${rank}(unit,name,dat,dummy,attr,found,default,ierr)
  use iotk_base
  implicit none
  integer, parameter :: this_kind = iotk_${type}${kind}
  integer,                                   intent(in)  :: unit
  character(len=*),                          intent(in)  :: name
#ifdef __IOTK_WORKAROUND6
  ${type}(kind=this_kind$LENSTAR)                        :: dat ${SHAPE[$rank]}
#else
  ${type}(kind=this_kind$LENSTAR),           intent(out) :: dat ${SHAPE[$rank]}
#endif
  type(iotk_dummytype),            optional              :: dummy
#ifdef __IOTK_WORKAROUND6
  character(len=*),                optional              :: attr
#else
  character(len=*),                optional, intent(out) :: attr
#endif
  logical,                         optional, intent(out) :: found
  ${type}(kind=this_kind$LENSTAR), optional, intent(in)  :: default ${SHAPE[$rank]}
  integer,                         optional, intent(out) :: ierr
end subroutine iotk_scan_dat_${type}${kind}_${rank}
#endif
>    done
#endif
>  done
>done
end interface

interface iotk_scan_dat_aux
>for type in $types ; do
>  eval "LENSTAR=\$LENSTAR_$type"
>  for kind in $kinds ; do
>    [[ $type == CHARACTER ]] && [[ $kind != 1 ]] && continue
#ifdef __IOTK_${type}${kind}
subroutine iotk_scan_dat_aux_${type}${kind}(unit,dat,rkind,rlen,fmt,ierr)
  use iotk_base
  implicit none
  integer, parameter :: this_kind = iotk_${type}${kind}
  integer,                         intent(in)  :: unit
#ifdef __IOTK_WORKAROUND6
  ${type}(kind=this_kind$LENSTAR)              :: dat (:)
#else
  ${type}(kind=this_kind$LENSTAR), intent(out) :: dat (:)
#endif
  integer,                         intent(in)  :: rkind
  integer,                         intent(in)  :: rlen
  character(len=*),                intent(in)  :: fmt
  integer,                         intent(out) :: ierr
end subroutine iotk_scan_dat_aux_${type}${kind}
#endif
>  done
>done
end interface

end module iotk_dat_interf


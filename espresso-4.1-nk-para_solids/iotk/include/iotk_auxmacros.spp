>##############################################################################<
># inclusion of the spp definitions
>include iotk_include.sh
>##############################################################################<

#ifndef __IOTK_AUXMACROS_H
#define __IOTK_AUXMACROS_H

! The macros are defined with -D option or inside iotk_config.h
! The default values are set here

! Maximum rank of an array
#ifndef __IOTK_MAXRANK
#  define __IOTK_MAXRANK $maxrank
#endif

! Minimum value used in iotk_free_unit
#ifndef __IOTK_UNITMIN
#  define __IOTK_UNITMIN 90000
#endif

! Maximum value used in iotk_free_unit
#ifndef __IOTK_UNITMAX
#  define __IOTK_UNITMAX 99999
#endif

! Unit for errors
#ifndef __IOTK_ERROR_UNIT
#  define __IOTK_ERROR_UNIT 0
#endif

! Unit for output
#ifndef __IOTK_OUTPUT_UNIT
#  define __IOTK_OUTPUT_UNIT 6
#endif

! Kind for header in binary files
#ifndef __IOTK_HEADER_KIND
#  define __IOTK_HEADER_KIND selected_int_kind(8)
#endif

! Maximum number of arguments to the iotk tool
#ifndef __IOTK_MAXARGS
#  define __IOTK_MAXARGS 256
#endif

! Character (or eventually string) for newline
! It may be adjusted for particular systems
! It is used only in binary files, surrounding the tags so that they can
! be easily isolated with grep
! Unix    achar(10)
! Mac-OS  achar(13)
! Windows ? (now it should be a single byte)
#ifndef __IOTK_NEWLINE
#  define __IOTK_NEWLINE achar(10)
#endif

! Character for EOS
#ifndef __IOTK_EOS
#  define __IOTK_EOS achar(0)
#endif

! These are the default kinds, which depend on the options used
! during the library compilation
! Only default characters are implemented
#define __IOTK_CHARACTER1 iotk_character_defkind
! For logical, integer and real types, the c precompiler
! looks for defined kinds. If no kind is found, the default
! is used as __IOTK_type1
>for type in LOGICAL INTEGER REAL
>do
>  for kind in $kinds
>  do
#ifndef __IOTK_${type}${kind}
>  done
#define __IOTK_${type}1 iotk_${type}_defkind
>  for kind in $kinds
>  do
#endif
>  done
>done

! Complex are treated indentically to reals
! These lines map the definitions.
>for kind in $kinds ; do
#ifdef __IOTK_REAL$kind
#  define __IOTK_COMPLEX$kind __IOTK_REAL$kind
#else
#  undef __IOTK_COMPLEX$kind
#endif
>done

! Some useful check follow
#if __IOTK_MAXRANK > $maxrank
 #error
#endif
#if __IOTK_MAXRANK < 1
 #error
#endif
>for type in LOGICAL INTEGER REAL ; do
>  for((kind=nkinds+1 ; $kind <= 10 ; kind++)) ; do
#ifdef __IOTK_${type}${kind}
 #error
#endif
>  done
>done

#ifdef __IOTK_SAFEST
#  define __IOTK_WORKAROUND1
#  define __IOTK_WORKAROUND2
#  define __IOTK_WORKAROUND3
#  define __IOTK_WORKAROUND4
#  define __IOTK_WORKAROUND5
#  define __IOTK_WORKAROUND6
#  define __IOTK_WORKAROUND7
#  define __IOTK_WORKAROUND8
#  define __IOTK_WORKAROUND9
#endif

#endif


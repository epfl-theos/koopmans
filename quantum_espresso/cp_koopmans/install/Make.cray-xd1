
# make.sys for CRAY-XD1, enhanced version for CINECA by Carlo Cavazzoni
# Edit according to your need

# compilation rules

.SUFFIXES :
.SUFFIXES : .o .c .f .f90

.f90.o:
        $(MPIF90) $(F90FLAGS) -c $<

.f.o:
        $(F77) $(FFLAGS) -c $<

.c.o:
        $(CC) $(CFLAGS) -c $<


CC             = pgcc
MPICC          = mpicc
CFLAGS         = -fast  -Mpreprocess -O2 -tp amd64 -fastsse $(DFLAGS) $(IFLAGS)
CPP            = cpp
CPPFLAGS       = -P -traditional $(DFLAGS) $(IFLAGS)
F90            = pgf90
MPIF90         = mpif90
F90FLAGS       = $(FFLAGS) $(FDFLAGS) $(IFLAGS) $(MODFLAGS)
F90FLAGS_NOOPT = $(FFLAGS_NOOPT) $(FDFLAGS) $(IFLAGS) $(MODFLAGS)
F77            = pgf77
MPIF77         = mpif77
FFLAGS         = -fast -r8 -Mpreprocess -O2 -tp amd64 -fastsse
FFLAGS_NOOPT   = -O0
LD             = mpif90
LDFLAGS        = 
AR             = ar
ARFLAGS        = ruv
RANLIB         = echo
BLAS_LIBS      = -L/opt/acml2.5-64bit/pgi64/lib/ -lacml
LAPACK_LIBS    = 
FFT_LIBS       = 
MPI_LIBS       = 
MASS_LIBS      = 

# -----------------------------
# application-specific settings

# See include/defs.h.README for a list of precompilation options
# (possible arguments to -D or -U) and their meaning
DFLAGS         = -D__XD1 -D__PGI -D__FFTW -D__USE_INTERNAL_FFTW -D__MPI -D__PARA
FDFLAGS        = $(DFLAGS)
IFLAGS         = -I../include 
MODFLAGS       = -I. -I../Modules -I../PW -I../PH -I../iotk/src -I../CPV

LIBOBJS        = ../flib/ptools.a ../flib/flib.a ../clib/clib.a ../iotk/src/libiotk.a
# LIBS must contain the location of all needed external libraries
LIBS           = $(LAPACK_LIBS) $(BLAS_LIBS) $(FFT_LIBS) $(MPI_LIBS) $(MASS_LIBS)
# MYLIB can be one of the following (depending on LIBS):
# blas       : compile the local copy of blas routines
# lapack     : compile the local copy of lapack routines
# blas_and_lapack : all of the above - use this for a quick test
#              or if you don't have an optimized blas/lapack library
# lapack_ibm : compile only lapack routines not present in IBM ESSL
#              use this together with IBM ESSL
# lapack_t3e : compile only lapack routines not present in T3E scilib
#              use this together with T3E scilib
# lapack_mkl : compile only lapack routines not present in Intel MKL
#              use this together with Intel MKL
MYLIB          = 



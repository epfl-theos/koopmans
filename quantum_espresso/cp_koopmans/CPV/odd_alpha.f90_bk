!--------------------------------------------------------------
subroutine odd_alpha_routine( evc, nbsp, nbndx, lgam, is_empty)
!--------------------------------------------------------------
      !
      ! alpha_v = (\sum (I,l) {alpha0_I <c_v|chi(I,l)><chi(I,l)|c_v>}) / (\sum (I,l) {<c_v|chi(I,l)><chi(I,l)|c_v>}),
      ! where chi(I,l) is orthornormal pseudo atomic wfc
      ! input: evc_wfc
      ! out: odd_alpha, valpsi >>> pass to sharing variable
      ! full valpsi  will be complete in nksiclib routine 
      !
      !
      use kinds,              ONLY: DP        
      USE ions_base,          ONLY: nsp
      USE mp_global,          ONLY: intra_image_comm
      USE mp,                 ONLY: mp_bcast, mp_sum
      USE io_global,          ONLY: ionode, ionode_id, stdout
      use gvecw,              only: ngw
      use reciprocal_vectors, only: gstart
      USE uspp,               ONLY: nhsa=>nkb, betae => vkb
      use electrons_base,     only: nspin, ispin, f
      USE cp_main_variables,  ONLY: eigr
      use orthogonalize_base, ONLY: calphi
      USE nksic,              ONLY: odd_alpha, valpsi, swfc_fixed, &
                                    becwfc_fixed, alpha0_ref, call_index, &
                                    call_index_emp, alpha0_ref_emp 
                                     
      USE wavefunctions_module, ONLY : c0_fixed, c0fixed_emp
      USE twin_types
      !
      implicit none
      !
#ifdef __PARA
      include 'mpif.h'
#endif
      !
      integer,     intent(in)  :: nbsp, nbndx
      complex(DP), intent(in)  :: evc(ngw,nbndx) 
      logical :: lgam, is_empty
      !
      ! local variables
      !
      logical :: odd_alpha_is_fixed = .true.
      real(DP),    allocatable :: norm(:), alpha_mean(:), temp(:)
      complex(DP), allocatable :: hpsi(:,:), tempc(:)
      complex(DP), allocatable :: wfc(:,:)
      type(twin_matrix)        :: proj 
      !
      integer ::  n_ref_nkscal0  
      integer,     allocatable :: index_ref_nkscal0(:)
      real(DP),    allocatable :: ref_nkscal0(:)
      real(DP),    allocatable :: spead_ref_nkscal0(:)
      ! 
      integer :: i, iv, jv, n_evc0_fixed
      complex(DP) :: tempsi
      !
      ! this part is computed only one at starting calculation
      !
      !
      if (is_empty) then
         ! 
         call_index_emp = call_index_emp + 1  
         !
      else
         !
         call_index = call_index + 1 
         ! 
      endif
      !
      write(stdout, *) call_index_emp
      if ( (call_index .eq. 1) .or. (call_index_emp .eq. 1) ) then
         !
         if (is_empty) then
            !
            ! alpha0_ref_emp first is allocated here, then will be deallocated 
            ! in the end of cp run in deallocate_nksic module.f90
            !
            write(stdout, *) 'hello1'
            allocate (alpha0_ref_emp(nbndx))
            alpha0_ref_emp = 0.d0
            !
         else
            !  
            ! alpha0_ref_emp first is allocated here, then will be deallocated 
            ! in the end of cp run in deallocate_nksic module.f90
            !   
            allocate (alpha0_ref(nbndx)) 
            alpha0_ref = 0.d0
            !
         endif
         !  
         ! read from file ref. alpha
         !
         if (ionode) then
            !
            if (is_empty) then
               !
               open (unit = 99, file = 'file_alpharef_empty.txt', form = 'formatted', status = 'old' )
               !  
            else 
               !
               open (unit = 99, file = 'file_alpharef.txt', form = 'formatted', status = 'old' )
               !
            endif
            !
            read(99, *), n_ref_nkscal0
            ! 
         endif
         ! 
            write(stdout, *) 'hello2'
         call mp_bcast( n_ref_nkscal0, ionode_id, intra_image_comm )
         ! 
         allocate(index_ref_nkscal0(n_ref_nkscal0))
         allocate(ref_nkscal0(n_ref_nkscal0))
         allocate(spead_ref_nkscal0(n_ref_nkscal0))
         !
            write(stdout, *) 'hello3'
         if (ionode) then
            !  
            do i = 1, n_ref_nkscal0
               ! 
               read (99, * ) index_ref_nkscal0(i), ref_nkscal0(i), spead_ref_nkscal0(i) 
               !
            enddo
            !
            close (99)
            ! 
         endif 
         !
            write(stdout, *) 'hello4'
         call mp_bcast( index_ref_nkscal0, ionode_id, intra_image_comm )
         call mp_bcast( ref_nkscal0, ionode_id, intra_image_comm )
         call mp_bcast( spead_ref_nkscal0, ionode_id, intra_image_comm )
         !
         ! first, we assign the refalpha to all fixed orbitals,
         !   
         do iv = 1, n_ref_nkscal0
            !
            if (is_empty) then
               !
               alpha0_ref_emp(iv) = ref_nkscal0(iv)
               ! 
            else
               !
               alpha0_ref(iv) = ref_nkscal0(iv)
               !
            endif
            !  
         enddo
         !
            write(stdout, *) 'hello5'
         deallocate(index_ref_nkscal0)
         deallocate(ref_nkscal0)
         deallocate(spead_ref_nkscal0)
         ! 
         ! Here, I allocate the global variables. This step is done at 
         ! the first time to call of this routine, or when the program restarted. 
         ! These allocated variable will be deallocated inside the 
         ! module deallocate_nksic 
         ! 
            write(stdout, *) 'hello6'
         ! 
         ! pass the evc0_fixed to wfc
         !
         allocate(wfc(ngw, nbndx))
         !
         if (is_empty) then
            !
            wfc(:,:) = c0fixed_emp(:,:)
            ! 
         else
            ! 
            wfc(:,:) = c0_fixed(:,:)
            ! 
            allocate(swfc_fixed(ngw, nbndx))
            ! 
            call init_twin(becwfc_fixed, lgam)
            !
            call allocate_twin(becwfc_fixed, nhsa, nbndx, lgam)
            !  
            ! calculate becwfc = <beta|wfc>
            !
            call nlsm1_twin( nbndx, 1, nsp, eigr, wfc, becwfc_fixed, 1, lgam )
            !
            ! calculate swfc = S|wfc>
            !
            call calphi( wfc, size(wfc,1), becwfc_fixed, nhsa, betae, swfc_fixed, nbndx, lgam)
            ! 
         endif
         !
         deallocate(wfc) 
         !
      endif 
      !
      write(stdout, *) 'hello'
      ! if the calculation does not update alpha wrt minimization wfc
      ! we return from here
      ! 
      if (odd_alpha_is_fixed) then
         !
         if (is_empty) then
            !
            odd_alpha(:) = alpha0_ref_emp(:)
            !
         else
            !
            odd_alpha(:) = alpha0_ref(:)
            !
         endif
         !   
         valpsi(:,:)  = (0.0_DP, 0.0_DP)
         !
         return
         !
      endif
      !
      ! else we want to update alpha wrt minimization wfc
      ! the below averaging scheme is performed.  
      !
      allocate(hpsi(nbndx,ngw), norm(nbndx), alpha_mean(nbndx))
      !
      n_evc0_fixed = nbndx 
      call init_twin(proj, lgam)
      call allocate_twin(proj, nbndx, n_evc0_fixed, lgam)
      ! 
      ! calculate proj = <wfc|S|evc_v>, updated at every wfc minimizing steps
      !
      IF(lgam) THEN
         ALLOCATE(temp(ngw))
      ELSE
         ALLOCATE(tempc(ngw))
      ENDIF
      !
      DO iv = 1, nbndx
         !
         IF(lgam) THEN
            !
            DO jv = 1, n_evc0_fixed
               !
               temp(:) = DBLE(CONJG( evc(:,iv)) * swfc_fixed(:,jv))
               !
               proj%rvec(iv,jv) = 2.d0*DBLE(SUM(temp))
               !
               IF (gstart == 2) proj%rvec(iv,jv)=proj%rvec(iv,jv)-temp(1)
               ! 
            ENDDO
            !
         ELSE
            !
            DO jv = 1, n_evc0_fixed
               ! 
               tempc(:) = CONJG(evc(:,iv)) * swfc_fixed(:,jv) 
               !
               proj%cvec(iv,jv) = SUM(tempc)
               !
            ENDDO
            !
         ENDIF
         ! 
      ENDDO
      !
      IF(lgam) THEN
         !
         DEALLOCATE(temp)
         ! 
         CALL mp_sum( proj%rvec, intra_image_comm )
         !
      ELSE
         !
         DEALLOCATE(tempc)
         !
         CALL mp_sum( proj%cvec, intra_image_comm )
         !
      ENDIF
      !
      alpha_mean(:) = 0.0_DP     
      norm(:)  = 0.0_DP     
      ! 
      do iv = 1, nbndx
         !
         do jv = 1, n_evc0_fixed 
            !
            if (lgam) then
               ! 
               if (is_empty) then
                  !  
                  alpha_mean(iv) = alpha_mean(iv) + alpha0_ref_emp(jv) * (proj%rvec(iv, jv) * proj%rvec(iv, jv))
                  !   
               else
                  !
                  alpha_mean(iv) = alpha_mean(iv) + alpha0_ref(jv) * (proj%rvec(iv, jv) * proj%rvec(iv, jv))
                  !  
               endif
               !
               norm(iv)  = norm(iv) + proj%rvec(iv, jv) * proj%rvec(iv, jv)
               !
            else
               ! 
               if (is_empty) then
                  !
                  alpha_mean(iv) = alpha_mean(iv) + alpha0_ref_emp(jv) * proj%cvec(iv, jv) * conjg(proj%cvec(iv, jv))
                  !
               else
                  !   
                  alpha_mean(iv) = alpha_mean(iv) + alpha0_ref(jv) * proj%cvec(iv, jv) * conjg(proj%cvec(iv, jv))
                  ! 
               endif
               !  
               norm(iv)  = norm(iv) + proj%cvec(iv, jv) * conjg(proj%cvec(iv, jv)) 
               ! 
            endif
            ! 
         enddo
         ! 
      enddo
      !
      ! compute alpha
      !
      alpha_mean(:) = alpha_mean(:)/norm(:)
      ! 
      ! compute hpsi
      !
      hpsi(:,:) = (0.0_DP, 0.0_DP)
      tempsi    = (0.0_DP, 0.0_DP)
      !
      do iv = 1, nbndx
         !
         do jv = 1, n_evc0_fixed
            !  
            if (lgam) then
              !
              if (is_empty) then
                 !
                 tempsi = proj%rvec(iv, jv)*( alpha0_ref_emp(jv) - alpha_mean(iv) ) 
                 !
              else
                 !
                 tempsi = proj%rvec(iv, jv)*( alpha0_ref(jv) - alpha_mean(iv) ) 
                 ! 
              endif
              !
            else
              !
              if (is_empty) then
                 !
                 tempsi = proj%cvec(iv, jv)*( alpha0_ref_emp(jv) - alpha_mean(iv) ) 
                 ! 
              else
                 !
                 tempsi = proj%cvec(iv, jv)*( alpha0_ref(jv) - alpha_mean(iv) ) 
                 !  
              endif
              ! 
            endif 
            !    
            call ZAXPY (ngw, tempsi, swfc_fixed(:, jv), 1, hpsi(iv, :), 1)
            !
         enddo
         !
      enddo
      !  
      ! passing the variables to commont variables
      !
      odd_alpha(:) = alpha_mean(:)
      valpsi(:,:)  = hpsi(:,:)
      ! 
      deallocate( hpsi, norm, alpha_mean )
      call deallocate_twin(proj)
      !
      return
      !  
end subroutine odd_alpha_routine
